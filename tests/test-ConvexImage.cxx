/*!
 * @author  Xinghua Lou <xinghua.lou@iwr.uni-heidelberg.de>
 *
 * @section LICENSE
 * 
 * BOT. Copyright (c) 2010 by Xinghua Lou.
 *
 * This software was developed by Xinghua Lou.
 * Enquiries shall be directed to: xinghua.lou@iwr.uni-heidelberg.de.
 *
 * All advertising materials mentioning features or use of this software must
 * display the following acknowledgement: ``This product includes the BOT
 * library developed by Xinghua Lou. Please direct enquiries concerning BOT to 
 * xinghua.lou@iwr.uni-heidelberg.de.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - All advertising materials mentioning features or use of this software must 
 *   display the following acknowledgement: ``This product includes the BOT
 *   library developed by Xinghua Lou. Please direct enquiries concerning BOT to 
 *   xinghua.lou@iwr.uni-heidelberg.de.
 * - The names of the authors must not be used to endorse or promote products 
 *   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
 * EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "../include/ConvexImage.hxx"
#include "../include/InputOutput.hxx"
#include <vector>

using namespace bot;

int main()
{
    // test 1
    double pts1_ary[] = {2, 4, 2, 4, 2, 8, 8, 2};
    Matrix2D pts1(Matrix2D::difference_type(4, 2), 0.0);
    for (int i=0; i< pts1.size(); i++)
        pts1[i] = pts1_ary[i];

    Matrix2D convex_hull1 = ConvexImage::convex_hull(pts1);
    std::cout << "*** simple convex hull with one object ****" << std::endl;
    std::cout << convex_hull1 << std::endl;
    std::cout << convex_hull1.shape() << std::endl;

    // test 2
    double pts3_ary[] = {20,21,22,23,24,25,26,27,18,19,20,21,22,23,24,25,26,27,28,29,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,50,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,48,49,50,51,52,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,46,47,48,49,50,51,52,53,54,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,45,46,47,48,49,50,51,52,53,54,55,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,44,45,46,47,48,49,50,51,52,53,54,55,56,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,18,19,20,21,22,23,24,25,26,27,28,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,20,21,22,23,24,25,26,27,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,44,45,46,47,48,49,50,51,52,53,54,55,56,45,46,47,48,49,50,51,52,53,54,55,46,47,48,49,50,51,52,53,54,48,49,50,51,52,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59};
    Matrix2D pts3(Matrix2D::difference_type(945, 2), 0.0);
    for (int i=0; i< pts3.size(); i++)
        pts3[i] = pts3_ary[i];

    Matrix2D convex_hull3 = ConvexImage::convex_hull(pts3);
    std::cout << "*** more complex convex hull with two objects ****" << std::endl;
    std::cout << convex_hull3 << std::endl;
    std::cout << convex_hull3.shape() << std::endl;

    Matrix2D img(Matrix2D::difference_type(64, 64), 0.0);
    for (int x=0; x < 64; x++) {
        for (int y=0; y < 64; y++) {
            Matrix2D pt(Matrix2D::difference_type(1, 2), 0.0);
            pt[0] = x;
            pt[1] = y;
            img(x, y) = ConvexImage::inside(pt, convex_hull3);
        }
    }
    std::cout << img << std::endl;

    return 0;
}
